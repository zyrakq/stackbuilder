---
version: "3.8"
services:
  web:
    image: "nginx:1.21-alpine"
    ports:
      - "80:80"
      - "443:443"
      - "8080:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "web_data:/var/www/html"
      - "./nginx-dev.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - frontend
      - backend
    environment:
      - DEBUG=true
  app:
    image: "node:16-alpine"
    working_dir: /app
    volumes:
      - "./app:/app"
      - "node_modules:/app/node_modules"
      - "./app:/app"
      - "./app/src:/app/src:cached"
      - "node_modules:/app/node_modules"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ENV=development
      - DEBUG=*
      - HOT_RELOAD=true
    expose:
      - "3000"
    depends_on:
      - database
      - cache
    restart: unless-stopped
    networks:
      - backend
    command: npm run dev
    ports:
      - "3000:3000"
  database:
    image: "postgres:13-alpine"
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=appdb_dev
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "5432:5432"
  cache:
    image: "redis:6-alpine"
    command: redis-server --appendonly yes
    volumes:
      - "redis_data:/data"
    expose:
      - "6379"
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "6379:6379"
  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - backend
volumes:
  web_data: ~
  node_modules:
    driver: local
  postgres_data: ~
  redis_data: ~
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true