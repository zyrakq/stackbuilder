version: '3.8'
services:
  # Production-specific overrides
  web:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - web_data:/var/www/html
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - production_ssl_certs:/etc/ssl/certs:ro
      - production_ssl_keys:/etc/ssl/private:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - frontend
      - backend
    environment:
      - ENVIRONMENT=production
      - SSL_CERT_PATH=/etc/ssl/certs/production.crt
      - SSL_KEY_PATH=/etc/ssl/private/production.key
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        max_attempts: 3
  # Application backend
  app:
    image: node:16-alpine
    working_dir: /app
    volumes:
      - ./app:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ENV=production
      - API_BASE_URL=https://api.example.com
      - ENABLE_CLUSTERING=true
      - MAX_WORKERS=4
    expose:
      - "3000"
    depends_on:
      - database
      - cache
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
  # Database service
  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=appdb_production
      - POSTGRES_USER=produser
      - POSTGRES_PASSWORD=${PRODUCTION_DB_PASSWORD}
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - production_postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        max_attempts: 3
  # Redis cache
  cache:
    image: redis:6-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    restart: unless-stopped
    networks:
      - backend
    environment:
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1.5G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'
  # Production load balancer
  load-balancer:
    image: haproxy:2.4-alpine
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404" # HAProxy stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - production_ssl_certs:/etc/ssl/certs:ro
      - production_ssl_keys:/etc/ssl/private:ro
    depends_on:
      - web
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - frontend
  # Keycloak identity and access management
  keycloak:
    image: quay.io/keycloak/keycloak:20.0
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD:-admin123}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD:-keycloak123}
      - KC_HOSTNAME=localhost
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
    ports:
      - "8180:8080"
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes:ro
      - ./keycloak/imports:/opt/keycloak/data/import:ro
    depends_on:
      - keycloak-db
    networks:
      - auth
      - frontend
    restart: unless-stopped
  # Keycloak database
  keycloak-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD:-keycloak123}
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    networks:
      - auth
    restart: unless-stopped
  # OAuth2 Proxy for application protection
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
    command:
      - --config=/etc/oauth2-proxy.cfg
    ports:
      - "4180:4180"
    volumes:
      - ./oauth2-proxy.cfg:/etc/oauth2-proxy.cfg:ro
    environment:
      - OAUTH2_PROXY_CLIENT_ID=${OAUTH2_CLIENT_ID}
      - OAUTH2_PROXY_CLIENT_SECRET=${OAUTH2_CLIENT_SECRET}
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_COOKIE_SECRET}
    depends_on:
      - keycloak
    networks:
      - auth
      - frontend
      - backend
    restart: unless-stopped
  # LDAP server for enterprise integration
  openldap:
    image: osixia/openldap:1.5.0
    environment:
      - LDAP_ORGANISATION=Example Corp
      - LDAP_DOMAIN=example.com
      - LDAP_ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD:-admin123}
      - LDAP_CONFIG_PASSWORD=${LDAP_CONFIG_PASSWORD:-config123}
      - LDAP_READONLY_USER=true
      - LDAP_READONLY_USER_USERNAME=readonly
      - LDAP_READONLY_USER_PASSWORD=${LDAP_READONLY_PASSWORD:-readonly123}
    ports:
      - "389:389"
      - "636:636"
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
      - ./ldap/bootstrap:/container/service/slapd/assets/config/bootstrap/ldif/custom:ro
    networks:
      - auth
    restart: unless-stopped
  # LDAP admin interface
  phpldapadmin:
    image: osixia/phpldapadmin:0.9.0
    environment:
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
      - PHPLDAPADMIN_HTTPS=false
    ports:
      - "8181:80"
    depends_on:
      - openldap
    networks:
      - auth
      - frontend
    restart: unless-stopped
  # FreeRADIUS for network authentication
  freeradius:
    image: freeradius/freeradius-server:3.2.0
    ports:
      - "1812:1812/udp" # Authentication
      - "1813:1813/udp" # Accounting
    volumes:
      - ./freeradius/clients.conf:/etc/freeradius/3.0/clients.conf:ro
      - ./freeradius/users:/etc/freeradius/3.0/mods-config/files/authorize:ro
      - freeradius_logs:/var/log/freeradius
    networks:
      - auth
    restart: unless-stopped
  # Vault for secrets management
  vault:
    image: vault:1.12.0
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-root}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://127.0.0.1:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config:ro
    networks:
      - auth
      - backend
    restart: unless-stopped
  # Consul for service discovery and configuration
  consul:
    image: consul:1.14.0
    command: agent -server -bootstrap -ui -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul_data:/consul/data
      - ./consul/config:/consul/config:ro
    networks:
      - auth
      - backend
    restart: unless-stopped
volumes:
  web_data:
  node_modules:
  postgres_data:
  redis_data:
  production_postgres_data:
    external: true
  production_ssl_certs:
    external: true
  production_ssl_keys:
    external: true
  keycloak_db_data:
    driver: local
  ldap_data:
    driver: local
  ldap_config:
    driver: local
  freeradius_logs:
    driver: local
  vault_data:
    driver: local
  consul_data:
    driver: local
networks:
  frontend:
    driver: bridge
    external: true
  backend:
    driver: bridge
    internal: true
    external: true
  auth:
    driver: bridge
