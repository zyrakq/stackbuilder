---
version: "3.8"
services:
  web:
    image: "nginx:1.21-alpine"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "web_data:/var/www/html"
      - "./nginx-production.conf:/etc/nginx/nginx.conf:ro"
      - "production_ssl_certs:/etc/ssl/certs:ro"
      - "production_ssl_keys:/etc/ssl/private:ro"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - frontend
      - backend
    environment:
      - ENVIRONMENT=production
      - SSL_CERT_PATH=/etc/ssl/certs/production.crt
      - SSL_KEY_PATH=/etc/ssl/private/production.key
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        max_attempts: 3
  app:
    image: "node:16-alpine"
    working_dir: /app
    volumes:
      - "./app:/app"
      - "node_modules:/app/node_modules"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ENV=production
      - "API_BASE_URL=https://api.example.com"
      - ENABLE_CLUSTERING=true
      - MAX_WORKERS=4
    expose:
      - "3000"
    depends_on:
      - database
      - cache
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
  database:
    image: "postgres:13-alpine"
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=appdb_production
      - POSTGRES_USER=produser
      - "POSTGRES_PASSWORD=${PRODUCTION_DB_PASSWORD}"
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
      - "production_postgres_data:/var/lib/postgresql/data"
      - "./postgresql.conf:/etc/postgresql/postgresql.conf:ro"
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
      restart_policy:
        condition: on-failure
        max_attempts: 3
  cache:
    image: "redis:6-alpine"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - "redis_data:/data"
    expose:
      - "6379"
    restart: unless-stopped
    networks:
      - backend
    environment:
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1.5G
          cpus: "0.5"
        reservations:
          memory: 1G
          cpus: "0.25"
  load-balancer:
    image: "haproxy:2.4-alpine"
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"
    volumes:
      - "./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
      - "production_ssl_certs:/etc/ssl/certs:ro"
      - "production_ssl_keys:/etc/ssl/private:ro"
    depends_on:
      - web
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    networks:
      - frontend
volumes:
  web_data:
  node_modules:
  postgres_data:
  redis_data:
  production_postgres_data:
    external: true
  production_ssl_certs:
    external: true
  production_ssl_keys:
    external: true
networks:
  frontend:
    driver: bridge
    external: true
  backend:
    driver: bridge
    internal: true
    external: true